/*
  scrub comments and ;s and \ns and multi-spaces

  <var> :=
  | piece_counter
  | score
  | piece_type
  | piece_x
  | piece_y
  | ghost_y
  | piece_angle
  | hold_piece_type
  | mem[<e>] (CHECKED)
  | board[<e>][<e>] (CHECKED)

  <call> :=
  | call(left)
  | call(right)
  | call(drop)
  | call(rot_cw)
  | call(rot_ccw)
  | call(rot_180)
  | call(hold)
  | call(die)

  <val> := number | <var>

  * Lang
  <e> :=
  | <val>
  | <val> + <val>
  | <val> - <val>
  | <val> * <val>
  | <val> / <val>
  | <val> % <val>
  | <val> ^ <val>
  | <val> & <val>
  | <val> \| <val>
  | <val> == <val>
  | <val> != <val>
  | <val> > <val>
  | <val> < <val>
  | <val> >= <val>
  | <val> <= <val>

  <stmt> := <ifelse> | mem[n] = <e> | mem[n] = <call> | <call> | <mcall>
  <ifelse> := if ( <e> ) { <stmt> } else { <stmt> }
  <macro> := macro { <stmt>* }
  <tbot> := <macro>{0-256} <robot_name> { <stmt>* }
*/

/* call performs a lookup  */
{
    if (score > 10000) {
        call(drop)
    } else if (mem[0] < 2) {
        call(left);
        call(left);
        call(left);
        call(left);
        call(left);
        mem[0] = mem[0] + 1 call(drop);
    } else if (mem[1] < 2) {
        mem[1] = mem[1] + 1;
        call(right);
        call(drop);
    } else {
        call(rot_l);
        call(right);
        call(right);
        call(right);
        call(right);
        call(drop);
        call(rot_l);
        call(right);
        call(right);
        call(right);
        call(right);
        call(right);
        call(drop);
        mem[0] = 0 mem[1] = 0;
    }
}
/* robot { */
/*     macro a {} /\* empty macro bug? *\/ */
/*  */
/*     macro rfill { */
/*         /\* bottom row == 21?? *\/ */
/*         mem[10] = board[21][0]; */
/*         mem[11] = board[21][1]; */
/*         mem[12] = board[21][2]; */
/*         mem[13] = board[21][3]; */
/*         mem[14] = board[21][4]; */
/*         mem[15] = board[21][5]; */
/*         mem[16] = board[21][6]; */
/*         mem[17] = board[21][7]; */
/*         mem[18] = board[21][8]; */
/*         mem[19] = board[21][9]; */
/*     } */
/*  */
/*     if (piece_counter < 90) { */
/*         move_right; */
/*     } else { */
/*         move_drop; */
/*     } */
/*  */
/*     move_right; */
/*     move_right; */
/*  */
/*     srand override payload here probably */
/* } */
/*  */
/* default_bot { */
/*     if (score > 10000) { */
/*         call(die) */
/*     } else if (mem[0] == 0) { */
/*         mem[0] = call(left) */
/*     } else if (mem[1] == 0) { */
/*         mem[1] = 1 */
/*         call(right) */
/*         call(drop) */
/*     } else { */
/*         call(rot_r) */
/*         call(right) */
/*         call(right) */
/*         call(right) */
/*         call(drop) */
/*         call(rot_r) */
/*         call(right) */
/*         call(right) */
/*         call(right) */
/*         call(right) */
/*         call(drop) */
/*     } */
/* } */
